{ config, lib, pkgs, ... }:

with lib;

let

  cfg = config.programs.readline;

  mkSetVariableStr = n: v:
    let
      mkValueStr = v:
        if v == true then
          "on"
        else if v == false then
          "off"
        else if isInt v then
          toString v
        else if isString v then
          v
        else
          abort ("values ${toPretty v} is of unsupported type");
    in "set ${n} ${mkValueStr v}";

  mkBindingStr = k: v: ''"${k}": ${v}'';

  mkConditionalBindingsStr = cond: cbind: ''
    $if ${cond}
      ${concatStringsSep "\n  " (mapAttrsToList mkBindingStr cbind)}
    $endif
  '';

  mkConditionalVariablesStr = cond: cbind: ''
    $if ${cond}
      ${concatStringsSep "\n  " (mapAttrsToList mkSetVariableStr cbind)}
    $endif
  '';

in {
  options.programs.readline = {
    enable = mkEnableOption "readline";

    bindings = mkOption {
      default = { };
      type = types.attrsOf types.str;
      example = literalExample ''
        { "\\C-h" = "backward-kill-word"; }
      '';
      description = "Readline bindings.";
    };

    # conditional readline settings as documented here:
    #
    conditionalBindings = mkOption {
      default = { };
      type = types.attrsOf (types.attrsOf types.str);
      example = literalExample ''
        { Bash = { "\\C-h" = "backward-kill-word"; }; }
      '';
      description = ''
        Readline conditional bindings.
        See <link xlink:href="https://tiswww.cwru.edu/php/chet/readline/readline.html#SEC11"/> for documentation.
      '';
    };

    variables = mkOption {
      type = with types; attrsOf (either str (either int bool));
      default = { };
      example = { expand-tilde = true; };
      description = ''
        Readline customization variable assignments.
      '';
    };

    conditionalVariables = mkOption {
      type = types.attrsOf (types.attrsOf types.str);
      default = { };
      example = literalExample ''
        { Bash = { expand-tilde = true; }; }
      '';
      description = ''
        Readline conditional customization variable assignments.
        See <link xlink:href="https://tiswww.cwru.edu/php/chet/readline/readline.html#SEC11"/> for documentation.
      '';
    };

    includeSystemConfig = mkOption {
      type = types.bool;
      default = true;
      description = "Whether to include the system-wide configuration.";
    };

    extraConfig = mkOption {
      type = types.lines;
      default = "";
      description = ''
        Configuration lines appended unchanged to the end of the
        <filename>~/.inputrc</filename> file.
      '';
    };
  };

  config = mkIf cfg.enable {
    home.file.".inputrc".text = let
      configStr = concatStringsSep "\n"
        (optional cfg.includeSystemConfig "$include /etc/inputrc"
          ++ mapAttrsToList mkSetVariableStr cfg.variables
          ++ mapAttrsToList mkBindingStr cfg.bindings);
      conditionalBindingsStr = concatStringsSep "\n" (mapAttrsToList mkConditionalBindingsStr cfg.conditionalBindings);
      conditionalVariablesStr = concatStringsSep "\n" (mapAttrsToList mkConditionalVariablesStr cfg.conditionalVariables);
    in ''
      # Generated by Home Manager.

      ${configStr}
      ${cfg.extraConfig}
      ${conditionalBindingsStr}
      ${conditionalVariablesStr}
    '';
  };
}
